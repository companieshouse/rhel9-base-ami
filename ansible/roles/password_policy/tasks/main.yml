---
## Limit Password Reuse: password-auth
- name: Gather the package facts
  package_facts:
    manager: auto

- name: XCCDF Value var_password_pam_remember
  set_fact:
    var_password_pam_remember: !!str 24

- name: XCCDF Value var_password_pam_remember_control_flag
  set_fact:
    var_password_pam_remember_control_flag: !!str requisite,required

- name: Check authselect profile status
  command: authselect check
  register: result_authselect_check_cmd
  failed_when: false
  changed_when: false
  when: '"pam" in ansible_facts.packages'

- name: Select default authselect profile if none exists
  command: authselect select sssd --force
  when:
    - '"pam" in ansible_facts.packages'
    - result_authselect_check_cmd.rc != 0
  register: authselect_select_result
  failed_when: false

- name: Create custom authselect profile
  command: authselect create-profile hardening -b sssd
  when:
    - '"pam" in ansible_facts.packages'
    - authselect_select_result is success
  register: create_profile_result
  failed_when: false

- name: Select custom profile
  command: authselect select custom/hardening --force
  when:
    - '"pam" in ansible_facts.packages'
    - create_profile_result is success
  register: select_custom_result

- name: Configure password history in custom profile
  lineinfile:
    path: /etc/authselect/custom/hardening/password-auth
    regexp: '^password\s+requisite\s+pam_pwhistory.so'
    line: "password    requisite    pam_pwhistory.so remember={{ var_password_pam_remember }}"
    state: present
  when:
    - '"pam" in ansible_facts.packages'
    - select_custom_result is success

- name: Apply authselect changes
  command: authselect apply-changes -b
  when:
    - '"pam" in ansible_facts.packages'
    - select_custom_result is success

## Limit Password Reuse: system-auth
- name: Gather the package facts
  package_facts:
    manager: auto

- name: XCCDF Value var_password_pam_remember
  set_fact:
    var_password_pam_remember: !!str 24

- name: XCCDF Value var_password_pam_remember_control_flag
  set_fact:
    var_password_pam_remember_control_flag: !!str requisite,required

- name: Check authselect profile status
  command: authselect check
  register: result_authselect_check_cmd
  failed_when: false
  changed_when: false
  when: '"pam" in ansible_facts.packages'

- name: Select default authselect profile if none exists
  command: authselect select sssd --force
  when:
    - '"pam" in ansible_facts.packages'
    - result_authselect_check_cmd.rc != 0
  register: authselect_select_result
  failed_when: false

- name: Create custom authselect profile
  command: authselect create-profile hardening -b sssd
  when:
    - '"pam" in ansible_facts.packages'
    - authselect_select_result is success
  register: create_profile_result
  failed_when: false

- name: Select custom profile
  command: authselect select custom/hardening --force
  when:
    - '"pam" in ansible_facts.packages'
    - create_profile_result is success
  register: select_custom_result

- name: Configure password history in custom profile
  lineinfile:
    path: /etc/authselect/custom/hardening/system-auth
    regexp: '^password\s+requisite\s+pam_pwhistory.so'
    line: "password    requisite    pam_pwhistory.so remember={{ var_password_pam_remember }}"
    state: present
  when:
    - '"pam" in ansible_facts.packages'
    - select_custom_result is success

- name: Apply authselect changes
  command: authselect apply-changes -b
  when:
    - '"pam" in ansible_facts.packages'
    - select_custom_result is success

## Set Password Maximum Consecutive Repeating Characters
- name: Gather the package facts
  package_facts:
    manager: auto
- name: XCCDF Value var_password_pam_maxrepeat # promote to variable
  set_fact:
    var_password_pam_maxrepeat: !!str 3

- name:
    Set Password Maximum Consecutive Repeating Characters - Ensure PAM variable
    maxrepeat is set accordingly
  ansible.builtin.lineinfile:
    create: true
    dest: /etc/security/pwquality.conf
    regexp: ^#?\s*maxrepeat
    line: maxrepeat = {{ var_password_pam_maxrepeat }}
  when: '"pam" in ansible_facts.packages'

## Set Existing Passwords Maximum Age
- name: XCCDF Value var_accounts_maximum_age_login_defs
  set_fact:
    var_accounts_maximum_age_login_defs: !!str 365

- name: Collect users with not correct maximum time period between password changes
  ansible.builtin.command:
    cmd: awk -F':' '(/^[^:]+:[^!*]/ && ($5 > {{ var_accounts_maximum_age_login_defs }} || $5 == "")) {print $1}' /etc/shadow
  register: user_names

- name: Change the maximum time period between password changes
  ansible.builtin.command:
    cmd: "chage -M {{ var_accounts_maximum_age_login_defs }} {{ item }}"
  with_items: "{{ user_names.stdout_lines }}"
  when: user_names.stdout_lines | length > 0

## Set Lockout Time for Failed Password Attempts
- name: Gather the package facts
  package_facts:
    manager: auto

- name:
    Set Lockout Time for Failed Password Attempts - Check if system relies on
    authselect tool
  ansible.builtin.stat:
    path: /usr/bin/authselect
  register: result_authselect_present
  when: '"pam" in ansible_facts.packages'

- name:
    Set Lockout Time for Failed Password Attempts - Remediation where authselect
    tool is present
  block:
    - name:
        Set Lockout Time for Failed Password Attempts - Check integrity of authselect
        current profile
      ansible.builtin.command:
        cmd: authselect check
      register: result_authselect_check_cmd
      changed_when: false
      failed_when: false

    - name:
        Set Lockout Time for Failed Password Attempts - Informative message based
        on the authselect integrity check result
      ansible.builtin.assert:
        that:
          - result_authselect_check_cmd.rc == 0
        fail_msg:
          - authselect integrity check failed. Remediation aborted!
          - This remediation could not be applied because an authselect profile was not
            selected or the selected profile is not intact.
          - It is not recommended to manually edit the PAM files when authselect tool
            is available.
          - In cases where the default authselect profile does not cover a specific demand,
            a custom authselect profile is recommended.
        success_msg:
          - authselect integrity check passed

    - name: Set Lockout Time for Failed Password Attempts - Get authselect current features
      ansible.builtin.shell:
        cmd: authselect current | tail -n+3 | awk '{ print $2 }'
      register: result_authselect_features
      changed_when: false
      when:
        - result_authselect_check_cmd is success

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure "with-faillock" feature
        is enabled using authselect tool
      ansible.builtin.command:
        cmd: authselect enable-feature with-faillock
      register: result_authselect_enable_feature_cmd
      when:
        - result_authselect_check_cmd is success
        - result_authselect_features.stdout is not search("with-faillock")

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure authselect changes
        are applied
      ansible.builtin.command:
        cmd: authselect apply-changes -b
      when:
        - result_authselect_enable_feature_cmd is not skipped
        - result_authselect_enable_feature_cmd is success
  when:
    - '"pam" in ansible_facts.packages'
    - result_authselect_present.stat.exists

- name:
    Set Lockout Time for Failed Password Attempts - Remediation where authselect
    tool is not present
  block:
    - name:
        Set Lockout Time for Failed Password Attempts - Check if pam_faillock.so
        is already enabled
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: .*auth.*pam_faillock\.so (preauth|authfail)
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_faillock_is_enabled

    - name:
        Set Lockout Time for Failed Password Attempts - Enable pam_faillock.so preauth
        editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: auth        required      pam_faillock.so preauth
        insertbefore: ^auth.*sufficient.*pam_unix\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0

    - name:
        Set Lockout Time for Failed Password Attempts - Enable pam_faillock.so authfail
        editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: auth        required      pam_faillock.so authfail
        insertbefore: ^auth.*required.*pam_deny\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0

    - name:
        Set Lockout Time for Failed Password Attempts - Enable pam_faillock.so account
        section editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: account     required      pam_faillock.so
        insertbefore: ^account.*required.*pam_unix\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0
  when:
    - '"pam" in ansible_facts.packages'
    - not result_authselect_present.stat.exists

- name: XCCDF Value var_accounts_passwords_pam_faillock_unlock_time # promote to variable
  set_fact:
    var_accounts_passwords_pam_faillock_unlock_time: !!str 900

- name:
    Set Lockout Time for Failed Password Attempts - Check the presence of /etc/security/faillock.conf
    file
  ansible.builtin.stat:
    path: /etc/security/faillock.conf
  register: result_faillock_conf_check
  when: '"pam" in ansible_facts.packages'

- name:
    Set Lockout Time for Failed Password Attempts - Ensure the pam_faillock.so
    unlock_time parameter in /etc/security/faillock.conf
  ansible.builtin.lineinfile:
    path: /etc/security/faillock.conf
    regexp: ^\s*unlock_time\s*=
    line: unlock_time = {{ var_accounts_passwords_pam_faillock_unlock_time }}
    state: present
  when:
    - '"pam" in ansible_facts.packages'
    - result_faillock_conf_check.stat.exists

- name:
    Set Lockout Time for Failed Password Attempts - Ensure the pam_faillock.so
    unlock_time parameter not in PAM files
  block:
    - name:
        Set Lockout Time for Failed Password Attempts - Check if /etc/pam.d/system-auth
        file is present
      ansible.builtin.stat:
        path: /etc/pam.d/system-auth
      register: result_pam_file_present

    - name:
        Set Lockout Time for Failed Password Attempts - Check the proper remediation
        for the system
      block:
        - name:
            Set Lockout Time for Failed Password Attempts - Define the PAM file to
            be edited as a local fact
          ansible.builtin.set_fact:
            pam_file_path: /etc/pam.d/system-auth

        - name:
            Set Lockout Time for Failed Password Attempts - Check if system relies
            on authselect tool
          ansible.builtin.stat:
            path: /usr/bin/authselect
          register: result_authselect_present

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure authselect custom
            profile is used if authselect is present
          block:
            - name:
                Set Lockout Time for Failed Password Attempts - Check integrity of authselect
                current profile
              ansible.builtin.command:
                cmd: authselect check
              register: result_authselect_check_cmd
              changed_when: false
              failed_when: false

            - name:
                Set Lockout Time for Failed Password Attempts - Informative message
                based on the authselect integrity check result
              ansible.builtin.assert:
                that:
                  - result_authselect_check_cmd.rc == 0
                fail_msg:
                  - authselect integrity check failed. Remediation aborted!
                  - This remediation could not be applied because an authselect profile was
                    not selected or the selected profile is not intact.
                  - It is not recommended to manually edit the PAM files when authselect tool
                    is available.
                  - In cases where the default authselect profile does not cover a specific
                    demand, a custom authselect profile is recommended.
                success_msg:
                  - authselect integrity check passed

            - name:
                Set Lockout Time for Failed Password Attempts - Get authselect current
                profile
              ansible.builtin.shell:
                cmd: authselect current -r | awk '{ print $1 }'
              register: result_authselect_profile
              changed_when: false
              when:
                - result_authselect_check_cmd is success

            - name:
                Set Lockout Time for Failed Password Attempts - Define the current authselect
                profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: "{{ result_authselect_profile.stdout }}"
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Define the new authselect
                custom profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: custom/hardening
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Get authselect current
                features to also enable them in the custom profile
              ansible.builtin.shell:
                cmd: authselect current | tail -n+3 | awk '{ print $2 }'
              register: result_authselect_features
              changed_when: false
              when:
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Check if any custom
                profile with the same name was already created
              ansible.builtin.stat:
                path: /etc/authselect/{{ authselect_custom_profile }}
              register: result_authselect_custom_profile_present
              changed_when: false
              when:
                - authselect_current_profile is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Create an authselect
                custom profile based on the current profile
              ansible.builtin.command:
                cmd:
                  authselect create-profile hardening -b {{ authselect_current_profile
                  }}
              when:
                - result_authselect_check_cmd is success
                - authselect_current_profile is not match("custom/")
                - not result_authselect_custom_profile_present.stat.exists

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure the authselect
                custom profile is selected
              ansible.builtin.command:
                cmd: authselect select {{ authselect_custom_profile }}
              register: result_pam_authselect_select_profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Set Lockout Time for Failed Password Attempts - Restore the authselect
                features in the custom profile
              ansible.builtin.command:
                cmd: authselect enable-feature {{ item }}
              loop: "{{ result_authselect_features.stdout_lines }}"
              register: result_pam_authselect_restore_features
              when:
                - result_authselect_profile is not skipped
                - result_authselect_features is not skipped
                - result_pam_authselect_select_profile is not skipped

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - result_pam_authselect_restore_features is not skipped

            - name:
                Set Lockout Time for Failed Password Attempts - Change the PAM file
                to be edited according to the custom authselect profile
              ansible.builtin.set_fact:
                pam_file_path:
                  /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
                  | basename }}
          when:
            - result_authselect_present.stat.exists

        - name:
            Set Lockout Time for Failed Password Attempts - Define a fact for control
            already filtered in case filters are used
          ansible.builtin.set_fact:
            pam_module_control: ""

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure the "unlock_time"
            option from "pam_faillock.so" is not present in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: "{{ pam_file_path }}"
            regexp: (.*auth.*pam_faillock.so.*)\bunlock_time\b=?[0-9a-zA-Z]*(.*)
            replace: \1\2
          register: result_pam_option_removal

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure authselect changes
            are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
            - result_authselect_present.stat.exists
            - result_pam_option_removal is changed
      when:
        - result_pam_file_present.stat.exists

    - name:
        Set Lockout Time for Failed Password Attempts - Check if /etc/pam.d/password-auth
        file is present
      ansible.builtin.stat:
        path: /etc/pam.d/password-auth
      register: result_pam_file_present

    - name:
        Set Lockout Time for Failed Password Attempts - Check the proper remediation
        for the system
      block:
        - name:
            Set Lockout Time for Failed Password Attempts - Define the PAM file to
            be edited as a local fact
          ansible.builtin.set_fact:
            pam_file_path: /etc/pam.d/password-auth

        - name:
            Set Lockout Time for Failed Password Attempts - Check if system relies
            on authselect tool
          ansible.builtin.stat:
            path: /usr/bin/authselect
          register: result_authselect_present

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure authselect custom
            profile is used if authselect is present
          block:
            - name:
                Set Lockout Time for Failed Password Attempts - Check integrity of authselect
                current profile
              ansible.builtin.command:
                cmd: authselect check
              register: result_authselect_check_cmd
              changed_when: false
              failed_when: false

            - name:
                Set Lockout Time for Failed Password Attempts - Informative message
                based on the authselect integrity check result
              ansible.builtin.assert:
                that:
                  - result_authselect_check_cmd.rc == 0
                fail_msg:
                  - authselect integrity check failed. Remediation aborted!
                  - This remediation could not be applied because an authselect profile was
                    not selected or the selected profile is not intact.
                  - It is not recommended to manually edit the PAM files when authselect tool
                    is available.
                  - In cases where the default authselect profile does not cover a specific
                    demand, a custom authselect profile is recommended.
                success_msg:
                  - authselect integrity check passed

            - name:
                Set Lockout Time for Failed Password Attempts - Get authselect current
                profile
              ansible.builtin.shell:
                cmd: authselect current -r | awk '{ print $1 }'
              register: result_authselect_profile
              changed_when: false
              when:
                - result_authselect_check_cmd is success

            - name:
                Set Lockout Time for Failed Password Attempts - Define the current authselect
                profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: "{{ result_authselect_profile.stdout }}"
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Define the new authselect
                custom profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: custom/hardening
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Get authselect current
                features to also enable them in the custom profile
              ansible.builtin.shell:
                cmd: authselect current | tail -n+3 | awk '{ print $2 }'
              register: result_authselect_features
              changed_when: false
              when:
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Check if any custom
                profile with the same name was already created
              ansible.builtin.stat:
                path: /etc/authselect/{{ authselect_custom_profile }}
              register: result_authselect_custom_profile_present
              changed_when: false
              when:
                - authselect_current_profile is not match("custom/")

            - name:
                Set Lockout Time for Failed Password Attempts - Create an authselect
                custom profile based on the current profile
              ansible.builtin.command:
                cmd:
                  authselect create-profile hardening -b {{ authselect_current_profile
                  }}
              when:
                - result_authselect_check_cmd is success
                - authselect_current_profile is not match("custom/")
                - not result_authselect_custom_profile_present.stat.exists

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure the authselect
                custom profile is selected
              ansible.builtin.command:
                cmd: authselect select {{ authselect_custom_profile }}
              register: result_pam_authselect_select_profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Set Lockout Time for Failed Password Attempts - Restore the authselect
                features in the custom profile
              ansible.builtin.command:
                cmd: authselect enable-feature {{ item }}
              loop: "{{ result_authselect_features.stdout_lines }}"
              register: result_pam_authselect_restore_features
              when:
                - result_authselect_profile is not skipped
                - result_authselect_features is not skipped
                - result_pam_authselect_select_profile is not skipped

            - name:
                Set Lockout Time for Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - result_pam_authselect_restore_features is not skipped

            - name:
                Set Lockout Time for Failed Password Attempts - Change the PAM file
                to be edited according to the custom authselect profile
              ansible.builtin.set_fact:
                pam_file_path:
                  /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
                  | basename }}
          when:
            - result_authselect_present.stat.exists

        - name:
            Set Lockout Time for Failed Password Attempts - Define a fact for control
            already filtered in case filters are used
          ansible.builtin.set_fact:
            pam_module_control: ""

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure the "unlock_time"
            option from "pam_faillock.so" is not present in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: "{{ pam_file_path }}"
            regexp: (.*auth.*pam_faillock.so.*)\bunlock_time\b=?[0-9a-zA-Z]*(.*)
            replace: \1\2
          register: result_pam_option_removal

        - name:
            Set Lockout Time for Failed Password Attempts - Ensure authselect changes
            are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
            - result_authselect_present.stat.exists
            - result_pam_option_removal is changed
      when:
        - result_pam_file_present.stat.exists
  when:
    - '"pam" in ansible_facts.packages'
    - result_faillock_conf_check.stat.exists

- name:
    Set Lockout Time for Failed Password Attempts - Ensure the pam_faillock.so
    unlock_time parameter in PAM files
  block:
    - name:
        Set Lockout Time for Failed Password Attempts - Check if pam_faillock.so
        unlock_time parameter is already enabled in pam files
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: .*auth.*pam_faillock\.so (preauth|authfail).*unlock_time
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_faillock_unlock_time_parameter_is_present

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure the inclusion of
        pam_faillock.so preauth unlock_time parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so preauth.*)
        line:
          \1required\3 unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time
          }}
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_unlock_time_parameter_is_present.found == 0

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure the inclusion of
        pam_faillock.so authfail unlock_time parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so authfail.*)
        line:
          \1required\3 unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time
          }}
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_unlock_time_parameter_is_present.found == 0

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure the desired value
        for pam_faillock.so preauth unlock_time parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so preauth.*)(unlock_time)=[0-9]+(.*)
        line: \1required\3\4={{ var_accounts_passwords_pam_faillock_unlock_time }}\5
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_unlock_time_parameter_is_present.found > 0

    - name:
        Set Lockout Time for Failed Password Attempts - Ensure the desired value
        for pam_faillock.so authfail unlock_time parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so authfail.*)(unlock_time)=[0-9]+(.*)
        line: \1required\3\4={{ var_accounts_passwords_pam_faillock_unlock_time }}\5
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_unlock_time_parameter_is_present.found > 0
  when:
    - '"pam" in ansible_facts.packages'
    - not result_faillock_conf_check.stat.exists

## Lock Accounts After Failed Password Attempts
- name: Gather the package facts
  package_facts:
    manager: auto

- name:
    Lock Accounts After Failed Password Attempts - Check if system relies on authselect
    tool
  ansible.builtin.stat:
    path: /usr/bin/authselect
  register: result_authselect_present
  when: '"pam" in ansible_facts.packages'

- name:
    Lock Accounts After Failed Password Attempts - Remediation where authselect
    tool is present
  block:
    - name:
        Lock Accounts After Failed Password Attempts - Check integrity of authselect
        current profile
      ansible.builtin.command:
        cmd: authselect check
      register: result_authselect_check_cmd
      changed_when: false
      failed_when: false

    - name:
        Lock Accounts After Failed Password Attempts - Informative message based
        on the authselect integrity check result
      ansible.builtin.assert:
        that:
          - result_authselect_check_cmd.rc == 0
        fail_msg:
          - authselect integrity check failed. Remediation aborted!
          - This remediation could not be applied because an authselect profile was not
            selected or the selected profile is not intact.
          - It is not recommended to manually edit the PAM files when authselect tool
            is available.
          - In cases where the default authselect profile does not cover a specific demand,
            a custom authselect profile is recommended.
        success_msg:
          - authselect integrity check passed

    - name: Lock Accounts After Failed Password Attempts - Get authselect current features
      ansible.builtin.shell:
        cmd: authselect current | tail -n+3 | awk '{ print $2 }'
      register: result_authselect_features
      changed_when: false
      when:
        - result_authselect_check_cmd is success

    - name:
        Lock Accounts After Failed Password Attempts - Ensure "with-faillock" feature
        is enabled using authselect tool
      ansible.builtin.command:
        cmd: authselect enable-feature with-faillock
      register: result_authselect_enable_feature_cmd
      when:
        - result_authselect_check_cmd is success
        - result_authselect_features.stdout is not search("with-faillock")

    - name:
        Lock Accounts After Failed Password Attempts - Ensure authselect changes
        are applied
      ansible.builtin.command:
        cmd: authselect apply-changes -b
      when:
        - result_authselect_enable_feature_cmd is not skipped
        - result_authselect_enable_feature_cmd is success
  when:
    - '"pam" in ansible_facts.packages'
    - result_authselect_present.stat.exists

- name:
    Lock Accounts After Failed Password Attempts - Remediation where authselect
    tool is not present
  block:
    - name:
        Lock Accounts After Failed Password Attempts - Check if pam_faillock.so
        is already enabled
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: .*auth.*pam_faillock\.so (preauth|authfail)
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_faillock_is_enabled

    - name:
        Lock Accounts After Failed Password Attempts - Enable pam_faillock.so preauth
        editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: auth        required      pam_faillock.so preauth
        insertbefore: ^auth.*sufficient.*pam_unix\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0

    - name:
        Lock Accounts After Failed Password Attempts - Enable pam_faillock.so authfail
        editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: auth        required      pam_faillock.so authfail
        insertbefore: ^auth.*required.*pam_deny\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0

    - name:
        Lock Accounts After Failed Password Attempts - Enable pam_faillock.so account
        section editing PAM files
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        line: account     required      pam_faillock.so
        insertbefore: ^account.*required.*pam_unix\.so.*
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_is_enabled.found == 0
  when:
    - '"pam" in ansible_facts.packages'
    - not result_authselect_present.stat.exists

- name: XCCDF Value var_accounts_passwords_pam_faillock_deny # promote to variable
  set_fact:
    var_accounts_passwords_pam_faillock_deny: !!str 5

- name:
    Lock Accounts After Failed Password Attempts - Check the presence of /etc/security/faillock.conf
    file
  ansible.builtin.stat:
    path: /etc/security/faillock.conf
  register: result_faillock_conf_check
  when: '"pam" in ansible_facts.packages'

- name:
    Lock Accounts After Failed Password Attempts - Ensure the pam_faillock.so
    deny parameter in /etc/security/faillock.conf
  ansible.builtin.lineinfile:
    path: /etc/security/faillock.conf
    regexp: ^\s*deny\s*=
    line: deny = {{ var_accounts_passwords_pam_faillock_deny }}
    state: present
  when:
    - '"pam" in ansible_facts.packages'
    - result_faillock_conf_check.stat.exists

- name:
    Lock Accounts After Failed Password Attempts - Ensure the pam_faillock.so
    deny parameter not in PAM files
  block:
    - name:
        Lock Accounts After Failed Password Attempts - Check if /etc/pam.d/system-auth
        file is present
      ansible.builtin.stat:
        path: /etc/pam.d/system-auth
      register: result_pam_file_present

    - name:
        Lock Accounts After Failed Password Attempts - Check the proper remediation
        for the system
      block:
        - name:
            Lock Accounts After Failed Password Attempts - Define the PAM file to
            be edited as a local fact
          ansible.builtin.set_fact:
            pam_file_path: /etc/pam.d/system-auth

        - name:
            Lock Accounts After Failed Password Attempts - Check if system relies
            on authselect tool
          ansible.builtin.stat:
            path: /usr/bin/authselect
          register: result_authselect_present

        - name:
            Lock Accounts After Failed Password Attempts - Ensure authselect custom
            profile is used if authselect is present
          block:
            - name:
                Lock Accounts After Failed Password Attempts - Check integrity of authselect
                current profile
              ansible.builtin.command:
                cmd: authselect check
              register: result_authselect_check_cmd
              changed_when: false
              failed_when: false

            - name:
                Lock Accounts After Failed Password Attempts - Informative message based
                on the authselect integrity check result
              ansible.builtin.assert:
                that:
                  - result_authselect_check_cmd.rc == 0
                fail_msg:
                  - authselect integrity check failed. Remediation aborted!
                  - This remediation could not be applied because an authselect profile was
                    not selected or the selected profile is not intact.
                  - It is not recommended to manually edit the PAM files when authselect tool
                    is available.
                  - In cases where the default authselect profile does not cover a specific
                    demand, a custom authselect profile is recommended.
                success_msg:
                  - authselect integrity check passed

            - name:
                Lock Accounts After Failed Password Attempts - Get authselect current
                profile
              ansible.builtin.shell:
                cmd: authselect current -r | awk '{ print $1 }'
              register: result_authselect_profile
              changed_when: false
              when:
                - result_authselect_check_cmd is success

            - name:
                Lock Accounts After Failed Password Attempts - Define the current authselect
                profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: "{{ result_authselect_profile.stdout }}"
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Define the new authselect
                custom profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: custom/hardening
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Get authselect current
                features to also enable them in the custom profile
              ansible.builtin.shell:
                cmd: authselect current | tail -n+3 | awk '{ print $2 }'
              register: result_authselect_features
              changed_when: false
              when:
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Check if any custom profile
                with the same name was already created
              ansible.builtin.stat:
                path: /etc/authselect/{{ authselect_custom_profile }}
              register: result_authselect_custom_profile_present
              changed_when: false
              when:
                - authselect_current_profile is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Create an authselect
                custom profile based on the current profile
              ansible.builtin.command:
                cmd:
                  authselect create-profile hardening -b {{ authselect_current_profile
                  }}
              when:
                - result_authselect_check_cmd is success
                - authselect_current_profile is not match("custom/")
                - not result_authselect_custom_profile_present.stat.exists

            - name:
                Lock Accounts After Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Lock Accounts After Failed Password Attempts - Ensure the authselect
                custom profile is selected
              ansible.builtin.command:
                cmd: authselect select {{ authselect_custom_profile }}
              register: result_pam_authselect_select_profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Lock Accounts After Failed Password Attempts - Restore the authselect
                features in the custom profile
              ansible.builtin.command:
                cmd: authselect enable-feature {{ item }}
              loop: "{{ result_authselect_features.stdout_lines }}"
              register: result_pam_authselect_restore_features
              when:
                - result_authselect_profile is not skipped
                - result_authselect_features is not skipped
                - result_pam_authselect_select_profile is not skipped

            - name:
                Lock Accounts After Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - result_pam_authselect_restore_features is not skipped

            - name:
                Lock Accounts After Failed Password Attempts - Change the PAM file to
                be edited according to the custom authselect profile
              ansible.builtin.set_fact:
                pam_file_path:
                  /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
                  | basename }}
          when:
            - result_authselect_present.stat.exists

        - name:
            Lock Accounts After Failed Password Attempts - Define a fact for control
            already filtered in case filters are used
          ansible.builtin.set_fact:
            pam_module_control: ""

        - name:
            Lock Accounts After Failed Password Attempts - Ensure the "deny" option
            from "pam_faillock.so" is not present in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: "{{ pam_file_path }}"
            regexp: (.*auth.*pam_faillock.so.*)\bdeny\b=?[0-9a-zA-Z]*(.*)
            replace: \1\2
          register: result_pam_option_removal

        - name:
            Lock Accounts After Failed Password Attempts - Ensure authselect changes
            are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
            - result_authselect_present.stat.exists
            - result_pam_option_removal is changed
      when:
        - result_pam_file_present.stat.exists

    - name:
        Lock Accounts After Failed Password Attempts - Check if /etc/pam.d/password-auth
        file is present
      ansible.builtin.stat:
        path: /etc/pam.d/password-auth
      register: result_pam_file_present

    - name:
        Lock Accounts After Failed Password Attempts - Check the proper remediation
        for the system
      block:
        - name:
            Lock Accounts After Failed Password Attempts - Define the PAM file to
            be edited as a local fact
          ansible.builtin.set_fact:
            pam_file_path: /etc/pam.d/password-auth

        - name:
            Lock Accounts After Failed Password Attempts - Check if system relies
            on authselect tool
          ansible.builtin.stat:
            path: /usr/bin/authselect
          register: result_authselect_present

        - name:
            Lock Accounts After Failed Password Attempts - Ensure authselect custom
            profile is used if authselect is present
          block:
            - name:
                Lock Accounts After Failed Password Attempts - Check integrity of authselect
                current profile
              ansible.builtin.command:
                cmd: authselect check
              register: result_authselect_check_cmd
              changed_when: false
              failed_when: false

            - name:
                Lock Accounts After Failed Password Attempts - Informative message based
                on the authselect integrity check result
              ansible.builtin.assert:
                that:
                  - result_authselect_check_cmd.rc == 0
                fail_msg:
                  - authselect integrity check failed. Remediation aborted!
                  - This remediation could not be applied because an authselect profile was
                    not selected or the selected profile is not intact.
                  - It is not recommended to manually edit the PAM files when authselect tool
                    is available.
                  - In cases where the default authselect profile does not cover a specific
                    demand, a custom authselect profile is recommended.
                success_msg:
                  - authselect integrity check passed

            - name:
                Lock Accounts After Failed Password Attempts - Get authselect current
                profile
              ansible.builtin.shell:
                cmd: authselect current -r | awk '{ print $1 }'
              register: result_authselect_profile
              changed_when: false
              when:
                - result_authselect_check_cmd is success

            - name:
                Lock Accounts After Failed Password Attempts - Define the current authselect
                profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: "{{ result_authselect_profile.stdout }}"
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Define the new authselect
                custom profile as a local fact
              ansible.builtin.set_fact:
                authselect_current_profile: "{{ result_authselect_profile.stdout }}"
                authselect_custom_profile: custom/hardening
              when:
                - result_authselect_profile is not skipped
                - result_authselect_profile.stdout is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Get authselect current
                features to also enable them in the custom profile
              ansible.builtin.shell:
                cmd: authselect current | tail -n+3 | awk '{ print $2 }'
              register: result_authselect_features
              changed_when: false
              when:
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Check if any custom profile
                with the same name was already created
              ansible.builtin.stat:
                path: /etc/authselect/{{ authselect_custom_profile }}
              register: result_authselect_custom_profile_present
              changed_when: false
              when:
                - authselect_current_profile is not match("custom/")

            - name:
                Lock Accounts After Failed Password Attempts - Create an authselect
                custom profile based on the current profile
              ansible.builtin.command:
                cmd:
                  authselect create-profile hardening -b {{ authselect_current_profile
                  }}
              when:
                - result_authselect_check_cmd is success
                - authselect_current_profile is not match("custom/")
                - not result_authselect_custom_profile_present.stat.exists

            - name:
                Lock Accounts After Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Lock Accounts After Failed Password Attempts - Ensure the authselect
                custom profile is selected
              ansible.builtin.command:
                cmd: authselect select {{ authselect_custom_profile }}
              register: result_pam_authselect_select_profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - authselect_current_profile is not match("custom/")
                - authselect_custom_profile is not match(authselect_current_profile)

            - name:
                Lock Accounts After Failed Password Attempts - Restore the authselect
                features in the custom profile
              ansible.builtin.command:
                cmd: authselect enable-feature {{ item }}
              loop: "{{ result_authselect_features.stdout_lines }}"
              register: result_pam_authselect_restore_features
              when:
                - result_authselect_profile is not skipped
                - result_authselect_features is not skipped
                - result_pam_authselect_select_profile is not skipped

            - name:
                Lock Accounts After Failed Password Attempts - Ensure authselect changes
                are applied
              ansible.builtin.command:
                cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
              when:
                - result_authselect_check_cmd is success
                - result_authselect_profile is not skipped
                - result_pam_authselect_restore_features is not skipped

            - name:
                Lock Accounts After Failed Password Attempts - Change the PAM file to
                be edited according to the custom authselect profile
              ansible.builtin.set_fact:
                pam_file_path:
                  /etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path
                  | basename }}
          when:
            - result_authselect_present.stat.exists

        - name:
            Lock Accounts After Failed Password Attempts - Define a fact for control
            already filtered in case filters are used
          ansible.builtin.set_fact:
            pam_module_control: ""

        - name:
            Lock Accounts After Failed Password Attempts - Ensure the "deny" option
            from "pam_faillock.so" is not present in {{ pam_file_path }}
          ansible.builtin.replace:
            dest: "{{ pam_file_path }}"
            regexp: (.*auth.*pam_faillock.so.*)\bdeny\b=?[0-9a-zA-Z]*(.*)
            replace: \1\2
          register: result_pam_option_removal

        - name:
            Lock Accounts After Failed Password Attempts - Ensure authselect changes
            are applied
          ansible.builtin.command:
            cmd: authselect apply-changes -b
          when:
            - result_authselect_present.stat.exists
            - result_pam_option_removal is changed
      when:
        - result_pam_file_present.stat.exists
  when:
    - '"pam" in ansible_facts.packages'
    - result_faillock_conf_check.stat.exists

- name:
    Lock Accounts After Failed Password Attempts - Ensure the pam_faillock.so
    deny parameter in PAM files
  block:
    - name:
        Lock Accounts After Failed Password Attempts - Check if pam_faillock.so
        deny parameter is already enabled in pam files
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: .*auth.*pam_faillock\.so (preauth|authfail).*deny
        state: absent
      check_mode: true
      changed_when: false
      register: result_pam_faillock_deny_parameter_is_present

    - name:
        Lock Accounts After Failed Password Attempts - Ensure the inclusion of pam_faillock.so
        preauth deny parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so preauth.*)
        line: \1required\3 deny={{ var_accounts_passwords_pam_faillock_deny }}
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_deny_parameter_is_present.found == 0

    - name:
        Lock Accounts After Failed Password Attempts - Ensure the inclusion of pam_faillock.so
        authfail deny parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so authfail.*)
        line: \1required\3 deny={{ var_accounts_passwords_pam_faillock_deny }}
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_deny_parameter_is_present.found == 0

    - name:
        Lock Accounts After Failed Password Attempts - Ensure the desired value
        for pam_faillock.so preauth deny parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so preauth.*)(deny)=[0-9]+(.*)
        line: \1required\3\4={{ var_accounts_passwords_pam_faillock_deny }}\5
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_deny_parameter_is_present.found > 0

    - name:
        Lock Accounts After Failed Password Attempts - Ensure the desired value
        for pam_faillock.so authfail deny parameter in auth section
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        backrefs: true
        regexp: (^\s*auth\s+)([\w\[].*\b)(\s+pam_faillock.so authfail.*)(deny)=[0-9]+(.*)
        line: \1required\3\4={{ var_accounts_passwords_pam_faillock_deny }}\5
        state: present
      loop:
        - /etc/pam.d/system-auth
        - /etc/pam.d/password-auth
      when:
        - result_pam_faillock_deny_parameter_is_present.found > 0
  when:
    - '"pam" in ansible_facts.packages'
    - not result_faillock_conf_check.stat.exists
