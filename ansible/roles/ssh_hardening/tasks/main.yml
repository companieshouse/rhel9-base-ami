---
- name: Disable AllowTcpForwarding
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^AllowTcpForwarding yes"
    line: AllowTcpForwarding no
    state: present
    backrefs: true

- name: Set ClientAliveCountMax
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^ClientAliveCountMax 3"
    line: ClientAliveCountMax 1
    state: present
    backrefs: true

- name: Set log level
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^LogLevel INFO"
    line: LogLevel VERBOSE
    state: present
    backrefs: true

- name: Set MaxAuthTries
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^MaxAuthTries 4"
    line: MaxAuthTries 3
    state: present
    backrefs: true

- name: Set MaxSessions
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^MaxSessions 4"
    line: MaxSessions 2
    state: present
    backrefs: true

- name: Disable TCPKeepAlive
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^TCPKeepAlive yes"
    line: TCPKeepAlive no
    state: present
    backrefs: true

- name: Disable X11Forwarding
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^X11Forwarding yes"
    line: X11Forwarding no
    state: present
    backrefs: true

- name: Set compression
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#Compression delayed"
    line: Compression no
    state: present
    backrefs: true

- name: Disable AllowAgentForwarding
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#AllowAgentForwarding yes"
    line: AllowAgentForwarding no
    state: present
    backrefs: true

- name: Set Banner
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#Banner none"
    line: Banner /etc/issue.net
    state: present
    backrefs: true

## Use Only Strong Key Exchange algorithms
- name: Gather the package facts
  package_facts:
    manager: auto
- name: XCCDF Value sshd_strong_kex # promote to variable
  set_fact:
    sshd_strong_kex: !!str -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1

- name: Use Only Strong Key Exchange algorithms
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*KexAlgorithms\s+
        state: absent
      check_mode: true
      changed_when: false
      register: dupes

    - name: Deduplicate values from /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*KexAlgorithms\s+
        state: absent
      when: dupes.found is defined and dupes.found > 1

    - name: Insert correct line to /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*KexAlgorithms\s+
        line: KexAlgorithms {{ sshd_strong_kex }}
        state: present
        insertbefore: BOF
        validate: /usr/sbin/sshd -t -f %s
  when: '"kernel" in ansible_facts.packages'

##Use Only Strong MACs
- name: Gather the package facts
  package_facts:
    manager: auto
- name: XCCDF Value sshd_strong_macs # promote to variable
  set_fact:
    sshd_strong_macs: !!str -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64-etm@openssh.com

- name: Use Only Strong MACs
  block:
    - name: Check for duplicate values
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*MACs\s+
        state: absent
      check_mode: true
      changed_when: false
      register: dupes

    - name: Deduplicate values from /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*MACs\s+
        state: absent
      when: dupes.found is defined and dupes.found > 1

    - name: Insert correct line to /etc/ssh/sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        create: true
        regexp: (?i)(?i)^\s*MACs\s+
        line: MACs {{ sshd_strong_macs }}
        state: present
        insertbefore: BOF
        validate: /usr/sbin/sshd -t -f %s
  when: '"kernel" in ansible_facts.packages'

- name: Restart SSH service
  service:
    name: sshd
    state: restarted

## Verify Group Ownership on SSH Server Private *_key Key Files
- name: Verify Group Ownership on SSH Server Private Keys
  block:
    - name: Gather the package facts
      package_facts:
        manager: auto

    - name: Find SSH private key files
      command:
        cmd: >-
          find /etc/ssh/ -maxdepth 1 -type f ! -group ssh_keys \(
          -regex '.*/.*_key$' -o
          -name 'ssh_host_*_key' -o
          -name 'id_*' ! -name '*.pub' \)
      register: files_found
      changed_when: false
      failed_when: false
      check_mode: false
      when: '"kernel" in ansible_facts.packages'

    - name: Ensure group owner on SSH private key files
      file:
        path: "{{ item }}"
        group: ssh_keys
        state: file
      with_items: "{{ files_found.stdout_lines }}"
      when:
        - '"kernel" in ansible_facts.packages'
        - "files_found.stdout_lines | length > 0"
